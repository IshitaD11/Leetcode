/* 42. Trapping Rain Water

https://leetcode.com/problems/trapping-rain-water/

>> Brute Force aproach with O(n^2). Check the max height on the right side p2 until p2>p1. p1 and p2 are two edged, get water retention by min of these two. then add min-height[0] to sum.
class Solution {
    public int trap(int[] height) {
        int p1;
        int p1i=0;
        int p2;
        int p2i=1;
        int n=height.length;
        int sum=0;
        int maxp2=0;int maxp2i=0;
        while(p2i<n)
        {
            p1=height[p1i];
            p2=height[p2i];
            for(int i=p2i; p2<p1 && i<n; i++)
            {
                if(height[i]>p2)
                {
                    p2=height[i];
                    p2i=i;
                }
            }
            int min=Math.min(p1,p2);
            for(int i=p1i+1;i<p2i;i++)
            {
                if(min-height[i] > 0)
                    sum+=min-height[i];
            }
            p1i=p2i;
            p2i=p1i+1;
        }
        return sum;
    }
} */

/* using prefix array>> TC:O(n) SC:O(n)
using prefix array >> take left prefix array to store max height at left,
        right prefix array to store max height at the right. water can be hold till, min of these two. 
        sum+=min(left,right)-height[i] 

class Solution {
    public int trap(int[] height) {
        int n=height.length;
        int[] leftmax = new int[n];
        int[] rightmax = new int[n];
        leftmax[0]=height[0];
        for(int i=1;i<n;i++)
        {
            leftmax[i]=Math.max(leftmax[i-1],height[i]);
        }
        rightmax[n-1]=height[n-1];
        for(int i=(n-2);i>=0;i--)
        {
            rightmax[i]=Math.max(rightmax[i+1],height[i]);
        }
        int sum=0;
        for(int i=0;i<n;i++)
        {
            sum+=Math.min(leftmax[i],rightmax[i])-height[i];
        }
        return sum;
       }
      } */
      
 /* using Two Pointer >> TC:O(n) SC:O(1)
Two pointer approach >> consider leftmax and rightmax, starting from the left and right end respectively.
if leftmax < rightmax -->  then leftmax is my minimum height, water = leftmax-A[i]
similarly is rightmax < leftmax --> then rightmax is my minimum height, water = rightmax-A[i]
When A[i] is greater than leftmax or rightmax --> do not calculate water, instead update the leftmax and rightmax only.
when leftmax == rightmax --> do the check for leftmax/rightmax, it will be the same */


class Solution {
    public int trap(int[] height) {

        int left = 0;
        int right = height.length-1;
        int leftMax=height[left];
        int rightMax=height[right];
        int water=0;
        while(left<right)
        {
            if(leftMax<rightMax)
            {
                left++;
                if(leftMax<height[left])
                {
                    leftMax=height[left];
                }
                else
                {
                    water += leftMax-height[left];
                }
            }
            else
            {
                right--;
                if(rightMax<height[right])
                {
                    rightMax=height[right];
                }
                else
                {
                    water += rightMax-height[right];
                }
            }
        }
        return water;
