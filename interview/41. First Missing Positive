/* 41. First Missing Positive

Given an unsorted integer array nums, return the smallest missing positive integer.

You must implement an algorithm that runs in O(n) time and uses constant extra space.

 

Example 1:

Input: nums = [1,2,0]
Output: 3
Explanation: The numbers in the range [1,2] are all in the array.
Example 2:

Input: nums = [3,4,-1,1]
Output: 2
Explanation: 1 is in the array but 2 is missing.
Example 3:

Input: nums = [7,8,9,11,12]
Output: 1
Explanation: The smallest positive integer 1 is missing.
 

Constraints:

1 <= nums.length <= 105
-231 <= nums[i] <= 231 - 1 */

/*Put the elements in the correct position as given below, by swapping A[i] with A[A[i]].
element: 1 2 3 4 5
index:   0 1 2 3 4

Skip swapping if the element is already in correct place, if the element is negative and if there is already another correct element present in A[A[i]] (this will be occuring when some elements are duplicate)

Once all the elements are placed, check where A[i]!=(i+1), that is the first missing positive */

class Solution {
    public int firstMissingPositive(int[] nums) {
        int n=nums.length;
        int indx=0;
        // iterate the array and place elements in correct position
        while(indx<n)
        {
            // System.out.println("indx"+indx);
            // System.out.println("nums[indx]"+nums[indx]);
            if((nums[indx]<1) || (nums[indx]>n) || (nums[indx]==(indx+1)) || (nums[nums[indx]-1]==nums[indx]))
            {
                indx++;
            }
            else
            {
                // swap with nums[nums[i]]
                int tmp=nums[nums[indx]-1];
                nums[nums[indx]-1]=nums[indx];
                nums[indx]=tmp;
            }
            // System.out.println(Arrays.toString(nums));
        }

        // iterate the array to check if the elements are put in correct position
        for(int i=0;i<n;i++)
        {
            if(nums[i] != (i+1))
                return (i+1);
        }
        return (n+1);
    }
}
