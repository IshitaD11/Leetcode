/* 567. Permutation in String
Given two strings s1 and s2, return true if s2 contains a permutation of s1, or false otherwise.

In other words, return true if one of s1's permutations is the substring of s2.

 

Example 1:

Input: s1 = "ab", s2 = "eidbaooo"
Output: true
Explanation: s2 contains one permutation of s1 ("ba").
Example 2:

Input: s1 = "ab", s2 = "eidboaoo"
Output: false
 

Constraints:

1 <= s1.length, s2.length <= 104
s1 and s2 consist of lowercase English letters. */
//---------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public boolean checkInclusion(String s1, String s2) {
        int len1 =  s1.length();
        int len2 = s2.length();
        if(len1>len2)
            return false;
        int[] s1arr = new int[26];
        for(int i=0;i<len1;i++)
        {
            s1arr[s1.charAt(i)-'a']++;
        }
        for(int i = 0 ; i<=len2-len1; i++)
        {
            int[] s2sub = new int[26];
            for(int j = 0 ; j< len1;j++)
            {
                s2sub[s2.charAt(i+j)-'a']++;    
            }
            if(Arrays.equals(s2sub,s1arr))
                return true;
        }
        return false;
    }
}
