/* 912. Sort an Array

Given an array of integers nums, sort the array in ascending order and return it.

You must solve the problem without using any built-in functions in O(nlog(n)) time complexity and with the smallest space complexity possible.

 

Example 1:

Input: nums = [5,2,3,1]
Output: [1,2,3,5]
Explanation: After sorting the array, the positions of some numbers are not changed (for example, 2 and 3), while the positions of other numbers are changed (for example, 1 and 5).
Example 2:

Input: nums = [5,1,1,2,0,0]
Output: [0,0,1,1,2,5]
Explanation: Note that the values of nums are not necessairly unique.
 

Constraints:

1 <= nums.length <= 5 * 104
-5 * 104 <= nums[i] <= 5 * 104 */
//-----------------------------------------------------------------------------------------------------------------------------------------------------------

class Solution {
    public int[] sortArray(int[] nums) {
        int s=0;
        int e=nums.length-1;
        sort(nums,s,e);
        return nums;
    }
    public void sort(int[] nums,int s, int e)
    {
        if(s>=e)
            return;

        int mid=s+(e-s)/2;

        sort(nums,s,mid);
        sort(nums,mid+1,e);

        merge(nums,s,e);
    }
    public void merge(int[] nums,int s, int e)
    {
        int mid=s+(e-s)/2;

        int len1=mid-s+1;
        int len2=e-mid;

        int[] arr1=new int[len1];
        int[] arr2=new int[len2];
        int mainIndx = s;
        for(int i=0;i<len1;i++)
        {
            arr1[i]=nums[mainIndx++];
        }
        mainIndx=mid+1;
        for(int i=0;i<len2;i++)
        {
            arr2[i]=nums[mainIndx++];
        }

        int indxA1=0;
        int indxA2=0;
        mainIndx=s;

        while(indxA1<len1 && indxA2<len2)
        {
            if(arr1[indxA1]<=arr2[indxA2])
                nums[mainIndx++] = arr1[indxA1++];
            else
                nums[mainIndx++] = arr2[indxA2++];
        }

        while(indxA1<len1)
            nums[mainIndx++] = arr1[indxA1++];
        while(indxA2<len2)
            nums[mainIndx++] = arr2[indxA2++];
    }
}
